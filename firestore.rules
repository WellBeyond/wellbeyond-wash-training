rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {

    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{document=**} {
      allow read, write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Match any document in the 'topics' collection
    match /topics/{topic} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }
    // Match any document in the 'systemTypes' collection
    match /systemTypes/{sysType} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Match any document in the 'subjects' collection
    match /subjects/{subject} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
      allow create: if request.resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Match any document in the 'lessons' collection
    match /lessons/{lesson} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
      allow create: if request.resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Match any document in the 'checklists' collection
    match /checklists/{listId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
      allow create: if request.resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

     // Match any document in the 'forms' collection
    match /forms/{form} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
      allow create: if request.resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Match any document in the 'formTypes' collection
    match /formTypes/{formType} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Match any document in the 'formSessions' collection
    match /formSessions/{formSession} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Match any document in the 'systems' collection
    match /systems/{systemId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
      allow create: if request.resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Match any document in the 'organizations' collection
    match /organizations/{organizations} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      allow write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }

    // Make sure the uid of the requesting user matches name of the user
    // document. The wildcard expression {userId} makes the userId variable
    // available in rules.
    match /admins/{userId} {
      allow read: if request.auth.uid != null && request.auth.uid == userId;
    }
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
      allow read: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isClientAdmin == true
      allow read, write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }
    match /users/{userId}/{collectionName}/{document=**} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
      allow read, write: if get(/databases/$(database)/documents/users/$(userId)).data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }
    match /sessions/{document=**} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }
    match /maintenanceLogs/{document=**} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow read, update: if resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId;
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }
    match /diagnosticLogs/{document=**} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow read, update: if resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId;
      allow create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
      allow read, write: if resource.data.organizationId in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.organizations;
    }
    match /symptoms/{symptomId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }
    match /diagnostics/{diagnosticId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }
    match /solutions/{solutionId} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
